import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Download, Mail, Calendar, Shield, AlertTriangle, CheckCircle, Clock } from 'lucide-react';

interface Report {
  id: string;
  title: string;
  date: string;
  riskScore: number;
  status: 'generated' | 'pending' | 'failed';
  threats: number;
  incidents: number;
  vulnerabilities: number;
}

interface WeeklyStats {
  totalThreats: number;
  criticalIncidents: number;
  vulnerabilitiesPatched: number;
  systemUptime: number;
  riskScore: number;
}

export default function ReportsPage() {
  const [reports, setReports] = useState<Report[]>([]);
  const [currentWeekStats, setCurrentWeekStats] = useState<WeeklyStats>({
    totalThreats: 0,
    criticalIncidents: 0,
    vulnerabilitiesPatched: 0,
    systemUptime: 0,
    riskScore: 0
  });
  const [isGenerating, setIsGenerating] = useState(false);

  useEffect(() => {
    fetchReports();
    fetchCurrentWeekStats();
  }, []);

  const fetchReports = async () => {
    try {
      const mockReports: Report[] = [
        {
          id: '1',
          title: 'Weekly Security Report - Week 45',
          date: '2024-11-08',
          riskScore: 75,
          status: 'generated',
          threats: 23,
          incidents: 4,
          vulnerabilities: 12
        },
        {
          id: '2',
          title: 'Weekly Security Report - Week 44',
          date: '2024-11-01',
          riskScore: 68,
          status: 'generated',
          threats: 18,
          incidents: 2,
          vulnerabilities: 8
        },
        {
          id: '3',
          title: 'Weekly Security Report - Week 43',
          date: '2024-10-25',
          riskScore: 82,
          status: 'generated',
          threats: 31,
          incidents: 7,
          vulnerabilities: 15
        }
      ];
      setReports(mockReports);
    } catch (error) {
      console.error('Error fetching reports:', error);
    }
  };

  const fetchCurrentWeekStats = async () => {
    try {
      const mockStats: WeeklyStats = {
        totalThreats: 23,
        criticalIncidents: 4,
        vulnerabilitiesPatched: 12,
        systemUptime: 99.8,
        riskScore: 75
      };
      setCurrentWeekStats(mockStats);
    } catch (error) {
      console.error('Error fetching current week stats:', error);
    }
  };

  const generateReport = async () => {
    setIsGenerating(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      const newReport: Report = {
        id: Date.now().toString(),
        title: `Weekly Security Report - Week ${new Date().getWeek()}`,
        date: new Date().toISOString().split('T')[0],
        riskScore: currentWeekStats.riskScore,
        status: 'generated',
        threats: currentWeekStats.totalThreats,
        incidents: currentWeekStats.criticalIncidents,
        vulnerabilities: currentWeekStats.vulnerabilitiesPatched
      };
      setReports([newReport, ...reports]);
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadPDF = async (reportId: string) => {
    try {
      console.log(`Downloading PDF for report ${reportId}`);
    } catch (error) {
      console.error('Error downloading PDF:', error);
    }
  };

  const emailReport = async (reportId: string) => {
    try {
      console.log(`Emailing report ${reportId}`);
    } catch (error) {
      console.error('Error emailing report:', error);
    }
  };

  const getRiskScoreColor = (score: number) => {
    if (score >= 80) return 'text-red-600 bg-red-100';
    if (score >= 60) return 'text-yellow-600 bg-yellow-100';
    return 'text-green-600 bg-green-100';
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'generated':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'pending':
        return <Clock className="h-4 w-4 text-yellow-600" />;
      case 'failed':
        return <AlertTriangle className="h-4 w-4 text-red-600" />;
      default:
        return <Clock className="h-4 w-4" />;
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">GuardianOS Reports</h1>
          <p className="text-gray-600 mt-2">Security reports and analytics dashboard</p>
        </div>
        <Button 
          onClick={generateReport} 
          disabled={isGenerating}
          className="bg-blue-600 hover:bg-blue-700"
        >
          {isGenerating ? (
            <>
              <Clock className="mr-2 h-4 w-4 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Calendar className="mr-2 h-4 w-4" />
              Generate Weekly Report
            </>
          )}
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Risk Score</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{currentWeekStats.riskScore}</div>
            <Badge className={`mt-1 ${getRiskScoreColor(currentWeekStats.riskScore)}`}>
              {currentWeekStats.riskScore >= 80 ? 'High Risk' : 
               currentWeekStats.riskScore >= 60 ? 'Medium Risk' : 'Low Risk'}
            </Badge>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Threats</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{currentWeekStats.totalThreats}</div>
            <p className="text-xs text-muted-foreground">This week</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Critical Incidents</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{currentWeekStats.criticalIncidents}</div>
            <p className="text-xs text-muted-foreground">Resolved</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Vulnerabilities</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{currentWeekStats.vulnerabilitiesPatched}</div>
            <p className="text-xs text-muted-foreground">Patched</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">System Uptime</CardTitle>
            <CheckCircle className="h-4 w-4 text-green-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{currentWeekStats.systemUptime}%</div>
            <p className="text-xs text-muted-foreground">This week</p>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Report History</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {reports.map((report) => (
              <div key={report.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                <div className="flex items-center space-x-4">
                  {getStatusIcon(report.status)}
                  <div>
                    <h3 className="font-semibold">{report.title}</h3>
                    <p className="text-sm text-gray-600">{report.date}</p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-4">
                  <div className="text-sm text-gray-600">
                    <span className="font-medium">Threats:</span> {report.threats} | 
                    <span className="font-medium"> Incidents:</span> {report.incidents} | 
                    <span className="font-medium"> Vulnerabilities:</span> {report.vulnerabilities}
                  </div>
                  
                  <Badge className={getRiskScoreColor(report.riskScore)}>
                    Risk: {report.riskScore}
                  </Badge>
                  
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => downloadPDF(report.id)}
                      disabled={report.status !== 'generated'}
                    >
                      <Download className="h-4 w-4 mr-1" />
                      PDF
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => emailReport(report.id)}
                      disabled={report.status !== 'generated'}
                    >
                      <Mail className="h-4 w-4 mr-1" />
                      Email
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

declare global {
  interface Date {
    getWeek(): number;
  }
}

Date.prototype.getWeek = function() {
  const date = new Date(this.getTime());
  date.setHours(0, 0, 0, 0);
  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
  const week1 = new Date(date.getFullYear(), 0, 4);
  return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
};